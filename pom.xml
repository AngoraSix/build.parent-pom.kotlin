<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.angorasix</groupId>
  <artifactId>parent-pom-kotlin</artifactId>
  <version>0.2.7</version>
  <packaging>pom</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>17</java.version>
    <kotlin.version>1.8.22</kotlin.version>

    <maven.kotlin.version>1.9.10</maven.kotlin.version>

    <spring-boot.version>3.1.1</spring-boot.version>
    <springmockk.version>2.0.3</springmockk.version>

    <maven.antrun.version>3.1.0</maven.antrun.version>
    <ktlint.version>0.47.1</ktlint.version>
    <maven.detekt.version>1.21.0</maven.detekt.version>
    <maven.pmd.plugin.version>3.20.0</maven.pmd.plugin.version>
    <maven.jacoco.version>0.8.11</maven.jacoco.version>

    <maven.source.version>3.3.0</maven.source.version>
    <maven.dokka.version>1.9.10</maven.dokka.version>
    <maven.jar.version>3.3.0</maven.jar.version>
    <maven.gpg.version>3.1.0</maven.gpg.version>
    <maven.nexus.version>1.6.13</maven.nexus.version>

    <jacoco-coverage.class.line.min>0.80</jacoco-coverage.class.line.min>
    <jacoco-coverage.class.branch.min>0.80</jacoco-coverage.class.branch.min>
    <skip.checks>false</skip.checks>
  </properties>

  <dependencies>
    <!-- kotlin -->

    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-kotlin</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-reflect</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jdk8</artifactId>
    </dependency>

    <!-- test -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
    <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
    <plugins>
      <!-- Kotlin -->
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${maven.kotlin.version}</version>
        <configuration>
          <args>
            <arg>-Xjsr305=strict</arg>
          </args>
        </configuration>
        <executions>
          <execution>
            <id>compile</id>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-allopen</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      <!-- Surefire -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>
        <!--        <dependencies>-->
        <!--          <dependency>-->
        <!--            <groupId>org.junit.platform</groupId>-->
        <!--            <artifactId>junit-platform-surefire-provider</artifactId>-->
        <!--            <version>1.0.3</version>-->
        <!--          </dependency>-->
        <!--          <dependency>-->
        <!--            <groupId>org.junit.jupiter</groupId>-->
        <!--            <artifactId>junit-jupiter-engine</artifactId>-->
        <!--            <version>5.8.2</version>-->
        <!--          </dependency>-->
        <!--        </dependencies>-->
        <configuration>
          <excludes>
            <exclude>**/*IntegrationTest.java</exclude>
            <exclude>**/*ApplicationTest.java</exclude>
            <exclude>**/*LiveTest.java</exclude>
          </excludes>
        </configuration>
      </plugin>
      <!-- Code Coverage - JaCoCo -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${maven.jacoco.version}</version>
        <executions>
          <execution>
            <id>default-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>CLASS</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco-coverage.class.line.min}</minimum>
                    </limit>
                    <limit>
                      <counter>BRANCH</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco-coverage.class.branch.min}</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <excludes>
            <exclude>**/model/*.class</exclude>
            <exclude>**/model/**/*.class</exclude>
            <exclude>**/domain/*.class</exclude>
            <exclude>**/domain/**/*.class</exclude>
            <exclude>**/dto/*.class</exclude>
            <exclude>**/dto/**/*.class</exclude>
            <exclude>**/configurationproperty/**/*.class</exclude>
            <exclude>**/infrastructure/**/constants/*.class</exclude>
            <exclude>**/*Application.class</exclude>
            <exclude>**/*ApplicationKt.class</exclude>
            <exclude>**/BeansKt*</exclude>
            <exclude>**/BeansInitializer.class</exclude>
          </excludes>
        </configuration>
      </plugin>
      <!-- Checkstyle -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${maven.antrun.version}</version>
        <executions>
          <execution>
            <id>ktlint</id>
            <phase>verify</phase>
            <configuration>
              <target name="ktlint">
                <java taskname="ktlint" dir="${basedir}" fork="true" failonerror="true"
                  classname="com.pinterest.ktlint.Main" classpathref="maven.plugin.classpath">
                  <arg value="src/**/*.kt"/>
                </java>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>ktlint-format</id>
            <configuration>
              <target name="ktlint">
                <java taskname="ktlint" dir="${basedir}" fork="true" failonerror="true"
                  classname="com.pinterest.ktlint.Main" classpathref="maven.plugin.classpath">
                  <arg value="-F"/>
                  <arg value="src/**/*.kt"/>
                </java>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.pinterest</groupId>
            <artifactId>ktlint</artifactId>
            <version>${ktlint.version}</version>
          </dependency>
          <!-- additional 3rd party ruleset(s) can be specified here -->
        </dependencies>
      </plugin>
      <!-- PMD and CPD -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>${maven.pmd.plugin.version}</version>
        <configuration>
          <failOnViolation>true</failOnViolation>
          <printFailingErrors>true</printFailingErrors>
          <targetJdk>${java.version}</targetJdk>
          <rulesets>
            <ruleset>pmd/rulesets/angorasix-base-ruleset.xml</ruleset>
          </rulesets>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.angorasix</groupId>
            <artifactId>kotlin-build-tools</artifactId>
            <version>0.2.7</version>
          </dependency>
        </dependencies>
      </plugin>
      <!-- Findbugs / Spotbugs -> detekt -->
      <plugin>
        <groupId>com.github.ozsie</groupId>
        <artifactId>detekt-maven-plugin</artifactId>
        <version>${maven.detekt.version}</version>
        <executions>
          <execution>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <config>detekt.yml</config>
              <buildUponDefaultConfig>true</buildUponDefaultConfig>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Maven publish - generate Javadocs and Source files for publishing artifact -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>${maven.source.version}</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jetbrains.dokka</groupId>
        <artifactId>dokka-maven-plugin</artifactId>
        <version>${maven.dokka.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>dokka</goal>
              <goal>javadoc</goal>
              <goal>javadocJar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven.jar.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
          <execution>
            <id>dokka-jar</id>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <classifier>dokka</classifier>
              <classesDirectory>${project.build.directory}/dokka</classesDirectory>
              <skipIfEmpty>true</skipIfEmpty>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Maven publish - main OSSRH setup -->
      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-staging-maven-plugin</artifactId>
        <version>${maven.nexus.version}</version>
        <extensions>true</extensions>
        <configuration>
          <serverId>ossrh</serverId>
          <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
          <autoReleaseAfterClose>true</autoReleaseAfterClose>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>3.0.1</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <profiles>
    <profile>
      <id>integration</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <!-- Failsafe -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <phase>test</phase>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <excludes>
                    <exclude>**/*LiveTest.java</exclude>
                  </excludes>
                  <includes>
                    <include>**/*IntegrationTest.java</include>
                    <include>**/*ApplicationTest.java</include>
                  </includes>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>ci-cd</id>
      <build>
        <plugins>
          <!-- Maven Signing - For Maven publish artifact -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>${maven.gpg.version}</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
                <configuration>
                  <gpgArguments>
                    <arg>--pinentry-mode</arg>
                    <arg>loopback</arg>
                  </gpgArguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <modules>
    <module>build-tools-kotlin</module>
  </modules>

  <name>Angorasix - Parent Pom - Kotlin</name>
  <description>Angora Six Parent Pom for Kotlin Library Projects</description>
  <url>https://angorasix.com</url>

  <licenses>
    <license>
      <name>GNU GENERAL PUBLIC LICENSE, Version 3</name>
      <url>https://www.gnu.org/licenses/gpl-3.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>Gerardo Roza</name>
      <email>rozagerardo@gmail.com</email>
      <organization>AngoraSix</organization>
      <organizationUrl>https://angorasix.com</organizationUrl>
    </developer>
  </developers>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <scm>
    <connection>scm:git:git://github.com/AngoraSix/commons.core.git</connection>
    <developerConnection>scm:git:ssh://github.com:AngoraSix/commons.core.git</developerConnection>
    <url>https://github.com/AngoraSix/commons.core</url>
  </scm>
</project>
